//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InternshipManagementSystem.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class db_internshipEntities1 : DbContext
    {
        public db_internshipEntities1()
            : base("name=db_internshipEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<tbl_application> tbl_application { get; set; }
        public virtual DbSet<tbl_department> tbl_department { get; set; }
        public virtual DbSet<tbl_internship> tbl_internship { get; set; }
        public virtual DbSet<tbl_report> tbl_report { get; set; }
        public virtual DbSet<tbl_student> tbl_student { get; set; }
        public virtual DbSet<tbl_user> tbl_user { get; set; }
        public virtual DbSet<tbl_academician> tbl_academician { get; set; }
    
        public virtual int insertnewacademician(Nullable<int> userid, string lastname, string name, Nullable<int> departmentid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var departmentidParameter = departmentid.HasValue ?
                new ObjectParameter("departmentid", departmentid) :
                new ObjectParameter("departmentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertnewacademician", useridParameter, lastnameParameter, nameParameter, departmentidParameter);
        }
    
        public virtual int insertnewapplication(string internshiptype, string companyname, string companyaddress, string companyphonenumber, string companymail, Nullable<System.DateTime> startingdate, Nullable<System.DateTime> enddate, Nullable<byte> workingday, byte[] documentbycompany, string managername, string managerlastname, string managermail, string managertitle, Nullable<bool> status)
        {
            var internshiptypeParameter = internshiptype != null ?
                new ObjectParameter("internshiptype", internshiptype) :
                new ObjectParameter("internshiptype", typeof(string));
    
            var companynameParameter = companyname != null ?
                new ObjectParameter("companyname", companyname) :
                new ObjectParameter("companyname", typeof(string));
    
            var companyaddressParameter = companyaddress != null ?
                new ObjectParameter("companyaddress", companyaddress) :
                new ObjectParameter("companyaddress", typeof(string));
    
            var companyphonenumberParameter = companyphonenumber != null ?
                new ObjectParameter("companyphonenumber", companyphonenumber) :
                new ObjectParameter("companyphonenumber", typeof(string));
    
            var companymailParameter = companymail != null ?
                new ObjectParameter("companymail", companymail) :
                new ObjectParameter("companymail", typeof(string));
    
            var startingdateParameter = startingdate.HasValue ?
                new ObjectParameter("startingdate", startingdate) :
                new ObjectParameter("startingdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var workingdayParameter = workingday.HasValue ?
                new ObjectParameter("workingday", workingday) :
                new ObjectParameter("workingday", typeof(byte));
    
            var documentbycompanyParameter = documentbycompany != null ?
                new ObjectParameter("documentbycompany", documentbycompany) :
                new ObjectParameter("documentbycompany", typeof(byte[]));
    
            var managernameParameter = managername != null ?
                new ObjectParameter("managername", managername) :
                new ObjectParameter("managername", typeof(string));
    
            var managerlastnameParameter = managerlastname != null ?
                new ObjectParameter("managerlastname", managerlastname) :
                new ObjectParameter("managerlastname", typeof(string));
    
            var managermailParameter = managermail != null ?
                new ObjectParameter("managermail", managermail) :
                new ObjectParameter("managermail", typeof(string));
    
            var managertitleParameter = managertitle != null ?
                new ObjectParameter("managertitle", managertitle) :
                new ObjectParameter("managertitle", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertnewapplication", internshiptypeParameter, companynameParameter, companyaddressParameter, companyphonenumberParameter, companymailParameter, startingdateParameter, enddateParameter, workingdayParameter, documentbycompanyParameter, managernameParameter, managerlastnameParameter, managermailParameter, managertitleParameter, statusParameter);
        }
    
        public virtual int insertnewdepartment(string departmentname, string facultyname)
        {
            var departmentnameParameter = departmentname != null ?
                new ObjectParameter("departmentname", departmentname) :
                new ObjectParameter("departmentname", typeof(string));
    
            var facultynameParameter = facultyname != null ?
                new ObjectParameter("facultyname", facultyname) :
                new ObjectParameter("facultyname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertnewdepartment", departmentnameParameter, facultynameParameter);
        }
    
        public virtual int insertnewinternship(string internshiptype, string companyname, string companyaddress, string companyphonenumber, string companymail, Nullable<System.DateTime> startingdate, Nullable<System.DateTime> enddate, Nullable<byte> workingday, byte[] documentbycompany, string managername, string managerlastname, string managermail, string managertitle)
        {
            var internshiptypeParameter = internshiptype != null ?
                new ObjectParameter("internshiptype", internshiptype) :
                new ObjectParameter("internshiptype", typeof(string));
    
            var companynameParameter = companyname != null ?
                new ObjectParameter("companyname", companyname) :
                new ObjectParameter("companyname", typeof(string));
    
            var companyaddressParameter = companyaddress != null ?
                new ObjectParameter("companyaddress", companyaddress) :
                new ObjectParameter("companyaddress", typeof(string));
    
            var companyphonenumberParameter = companyphonenumber != null ?
                new ObjectParameter("companyphonenumber", companyphonenumber) :
                new ObjectParameter("companyphonenumber", typeof(string));
    
            var companymailParameter = companymail != null ?
                new ObjectParameter("companymail", companymail) :
                new ObjectParameter("companymail", typeof(string));
    
            var startingdateParameter = startingdate.HasValue ?
                new ObjectParameter("startingdate", startingdate) :
                new ObjectParameter("startingdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var workingdayParameter = workingday.HasValue ?
                new ObjectParameter("workingday", workingday) :
                new ObjectParameter("workingday", typeof(byte));
    
            var documentbycompanyParameter = documentbycompany != null ?
                new ObjectParameter("documentbycompany", documentbycompany) :
                new ObjectParameter("documentbycompany", typeof(byte[]));
    
            var managernameParameter = managername != null ?
                new ObjectParameter("managername", managername) :
                new ObjectParameter("managername", typeof(string));
    
            var managerlastnameParameter = managerlastname != null ?
                new ObjectParameter("managerlastname", managerlastname) :
                new ObjectParameter("managerlastname", typeof(string));
    
            var managermailParameter = managermail != null ?
                new ObjectParameter("managermail", managermail) :
                new ObjectParameter("managermail", typeof(string));
    
            var managertitleParameter = managertitle != null ?
                new ObjectParameter("managertitle", managertitle) :
                new ObjectParameter("managertitle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertnewinternship", internshiptypeParameter, companynameParameter, companyaddressParameter, companyphonenumberParameter, companymailParameter, startingdateParameter, enddateParameter, workingdayParameter, documentbycompanyParameter, managernameParameter, managerlastnameParameter, managermailParameter, managertitleParameter);
        }
    
        public virtual int insertnewstudent(Nullable<int> studentnumber, Nullable<int> userid, string name, string lastname, Nullable<int> departmentid, Nullable<int> internid, Nullable<int> studyyear, Nullable<byte> semester, string address, string advisorname, Nullable<int> advisorid, string idnumber, string nationality, Nullable<System.DateTime> dateofbirth, byte[] photo, Nullable<int> internid2, Nullable<int> applicationid)
        {
            var studentnumberParameter = studentnumber.HasValue ?
                new ObjectParameter("studentnumber", studentnumber) :
                new ObjectParameter("studentnumber", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var departmentidParameter = departmentid.HasValue ?
                new ObjectParameter("departmentid", departmentid) :
                new ObjectParameter("departmentid", typeof(int));
    
            var internidParameter = internid.HasValue ?
                new ObjectParameter("internid", internid) :
                new ObjectParameter("internid", typeof(int));
    
            var studyyearParameter = studyyear.HasValue ?
                new ObjectParameter("studyyear", studyyear) :
                new ObjectParameter("studyyear", typeof(int));
    
            var semesterParameter = semester.HasValue ?
                new ObjectParameter("semester", semester) :
                new ObjectParameter("semester", typeof(byte));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var advisornameParameter = advisorname != null ?
                new ObjectParameter("advisorname", advisorname) :
                new ObjectParameter("advisorname", typeof(string));
    
            var advisoridParameter = advisorid.HasValue ?
                new ObjectParameter("advisorid", advisorid) :
                new ObjectParameter("advisorid", typeof(int));
    
            var idnumberParameter = idnumber != null ?
                new ObjectParameter("idnumber", idnumber) :
                new ObjectParameter("idnumber", typeof(string));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("nationality", nationality) :
                new ObjectParameter("nationality", typeof(string));
    
            var dateofbirthParameter = dateofbirth.HasValue ?
                new ObjectParameter("dateofbirth", dateofbirth) :
                new ObjectParameter("dateofbirth", typeof(System.DateTime));
    
            var photoParameter = photo != null ?
                new ObjectParameter("photo", photo) :
                new ObjectParameter("photo", typeof(byte[]));
    
            var internid2Parameter = internid2.HasValue ?
                new ObjectParameter("internid2", internid2) :
                new ObjectParameter("internid2", typeof(int));
    
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertnewstudent", studentnumberParameter, useridParameter, nameParameter, lastnameParameter, departmentidParameter, internidParameter, studyyearParameter, semesterParameter, addressParameter, advisornameParameter, advisoridParameter, idnumberParameter, nationalityParameter, dateofbirthParameter, photoParameter, internid2Parameter, applicationidParameter);
        }
    
        public virtual int insertnewstudent2(Nullable<int> studentnumber, Nullable<int> userid, string name, string lastname, Nullable<int> departmentid, Nullable<int> internid, Nullable<int> studyyear, Nullable<byte> semester, string address, string advisorname, Nullable<int> advisorid, string idnumber, string nationality, Nullable<System.DateTime> dateofbirth, byte[] photo)
        {
            var studentnumberParameter = studentnumber.HasValue ?
                new ObjectParameter("studentnumber", studentnumber) :
                new ObjectParameter("studentnumber", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var departmentidParameter = departmentid.HasValue ?
                new ObjectParameter("departmentid", departmentid) :
                new ObjectParameter("departmentid", typeof(int));
    
            var internidParameter = internid.HasValue ?
                new ObjectParameter("internid", internid) :
                new ObjectParameter("internid", typeof(int));
    
            var studyyearParameter = studyyear.HasValue ?
                new ObjectParameter("studyyear", studyyear) :
                new ObjectParameter("studyyear", typeof(int));
    
            var semesterParameter = semester.HasValue ?
                new ObjectParameter("semester", semester) :
                new ObjectParameter("semester", typeof(byte));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var advisornameParameter = advisorname != null ?
                new ObjectParameter("advisorname", advisorname) :
                new ObjectParameter("advisorname", typeof(string));
    
            var advisoridParameter = advisorid.HasValue ?
                new ObjectParameter("advisorid", advisorid) :
                new ObjectParameter("advisorid", typeof(int));
    
            var idnumberParameter = idnumber != null ?
                new ObjectParameter("idnumber", idnumber) :
                new ObjectParameter("idnumber", typeof(string));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("nationality", nationality) :
                new ObjectParameter("nationality", typeof(string));
    
            var dateofbirthParameter = dateofbirth.HasValue ?
                new ObjectParameter("dateofbirth", dateofbirth) :
                new ObjectParameter("dateofbirth", typeof(System.DateTime));
    
            var photoParameter = photo != null ?
                new ObjectParameter("photo", photo) :
                new ObjectParameter("photo", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertnewstudent2", studentnumberParameter, useridParameter, nameParameter, lastnameParameter, departmentidParameter, internidParameter, studyyearParameter, semesterParameter, addressParameter, advisornameParameter, advisoridParameter, idnumberParameter, nationalityParameter, dateofbirthParameter, photoParameter);
        }
    
        public virtual int insertnewuser(string username, string password, string mail, Nullable<byte> authorizationtype)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var mailParameter = mail != null ?
                new ObjectParameter("mail", mail) :
                new ObjectParameter("mail", typeof(string));
    
            var authorizationtypeParameter = authorizationtype.HasValue ?
                new ObjectParameter("authorizationtype", authorizationtype) :
                new ObjectParameter("authorizationtype", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertnewuser", usernameParameter, passwordParameter, mailParameter, authorizationtypeParameter);
        }
    
        public virtual ObjectResult<selectlastapp_Result> selectlastapp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectlastapp_Result>("selectlastapp");
        }
    
        public virtual ObjectResult<selectlastinternship_Result> selectlastinternship()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectlastinternship_Result>("selectlastinternship");
        }
    
        public virtual ObjectResult<selectlastuser_Result> selectlastuser()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectlastuser_Result>("selectlastuser");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int updatefaculty(Nullable<int> departmentid, string facultyname)
        {
            var departmentidParameter = departmentid.HasValue ?
                new ObjectParameter("departmentid", departmentid) :
                new ObjectParameter("departmentid", typeof(int));
    
            var facultynameParameter = facultyname != null ?
                new ObjectParameter("facultyname", facultyname) :
                new ObjectParameter("facultyname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updatefaculty", departmentidParameter, facultynameParameter);
        }
    }
}
